@using CBBW.BOL.TADA;
@model TADARuleDetails
@{
    ViewBag.Title = "New TA & DA Rule";
}
<div class="row newTable">
    @using (Html.BeginForm())
    {
        @Html.HiddenFor(m => m.EntryDate)
        @Html.HiddenFor(m => m.EntryTime)
        @Html.HiddenFor(m => m.NewConnectingID);
        @Html.HiddenFor(m => m.IsBtn);
        @Html.HiddenFor(m => m.IsParamBtn);
        @Html.HiddenFor(m => m.IsSubmitBtn);
        <div class="fixedElement">
            <div class="col-md-12" style="position: relative;">
                <div class="heading_text_btn mb-4 mt-4">
                    <div class="leftButton">
                        <button id="btnBack" type="button"
                                class="btn btn-primary me-2">
                            @*onclick="window.location.href='@Url.Action("Index", "TADARules", new { Area = "Security" })';">*@
                            <i data-feather="arrow-left-circle"></i>
                            Back
                        </button>
                        <button type="submit" name="Submit" value="create"
                                disabled="disabled" id="btnSubmit"
                                class="btn btn-secondary me-2">
                            <i data-feather="upload"></i>
                            Submit
                        </button>
                        <button type="button" id="btnClear" onclick="btnClearClicked()"
                                class="btn btn-success">
                            <i data-feather="x-circle"></i>
                            Clear
                        </button>
                    </div>
                    <h2>TA & DA - RULES</h2>
                </div>
            </div>
        </div>
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row d-flex align-items-center mb-3 ">
                        <label class="col-form-label col-md-2">
                            Effective From Date :
                        </label>
                        <div class="col-md-4">
                            @Html.EditorFor(m => m.EffectiveDate, new
                               {
                                   htmlAttributes = new
                                   {
                                       @readonly = "readonly",
                                       onchange = "validatecontrol()",
                                       @class = "form-control pointer datepicker1 isvalidate EffDt"
                                   }
                               })
                        </div>
                    </div>
                    <div class="row d-flex align-items-center">
                        <label class="col-form-label col-md-2">
                            Entry Date  :
                        </label>
                        <div class="col-md-4">
                            @Html.TextBoxFor(m => m.EntryDate, "{0:dd-MMM-yyyy}", 
                           htmlAttributes: new { @class = "form-control", disabled = "disabled" })
                        </div>
                        <label class="col-form-label col-md-2">
                            Time  :
                        </label>
                        <div class="col-md-4">
                            @Html.TextBoxFor(m => m.EntryTime, htmlAttributes: new { @class = "form-control", disabled = "disabled" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12">
            <div class="bgColor wid-100 mb-4">
                <ul>
                    <li>
                        @*<span class="d-flex justify-content-start align-items-center infoerror">*@
                        Minimum Hours Of Tour Required To Get Half DA:
                        <div class="form-group">
                            @Html.TextBoxFor(m => m.MinHoursForHalfDA,
                           htmlAttributes: new
                           {
                               @class = "form-control pointer only-numeric isvalidate is-valid",
                               @placeholder = "Hours",
                               onkeyup = "validatecontrol()",
                               title = "Value must be 1 - 9"
                           })
                        </div>
                        @*<button type="button" id="tt_MinHoursForHalfDA"
                                    class="btn btn-outline-danger "
                                    data-toggle="tooltip" data-placement="top"
                                    title="Value must be 0 - 9">
                                <i data-feather="info"></i>
                            </button>*@
                        @*</span>*@
                    </li>
                    <li>
                        <span class="d-flex justify-content-start align-items-center infoerror">
                            Pay DA When Destination is More Than (KMS):
                            <div class="form-group">
                                @Html.TextBoxFor(m => m.MinKmsForDA,
                                   htmlAttributes: new
                                   {
                                       @class = "form-control pointer only-numeric isvalidate is-valid",
                                       @placeholder = "KMS",
                                       onkeyup = "validatecontrol()",
                                       title = "Value must be 1 - 99"
                                   })
                                @*<input type="text" class="form-control" placeholder="KMS">*@
                            </div>

                        </span>
                            @*<button type="button" id="tt_MinKmsForDA"
                                        class="btn btn-outline-danger "
                                        data-toggle="tooltip" data-placement="top"
                                        title="Value must be 0 - 99">
                                    <i data-feather="info"></i>
                                </button>*@
                        
                    </li>
                    <li>
                        When Company Accommodation Available Lodging Expenses Allowed?
                        @Html.DropDownListFor(m => m.LodgingExpOnCompAcco,
                       new[] {
                           new SelectListItem { Text = "Yes", Value = "" },
                           new SelectListItem { Text = "No", Value = "false" } },
                       htmlAttributes: new
                            {
                           @class = "form-select pointer isvalidate is-valid",
                           @onchange = "validatecontrol()",
                           title = "Accept only no",
                            })
                    </li>
                    <li>
                        Local Conveyance Eligible:
                        @Html.DropDownListFor(m => m.LocalConvEligibility,
                       new[] {
                           new SelectListItem { Text = "Yes", Value = "true" },
                           new SelectListItem { Text = "No", Value = "false" } }, "-",
                       htmlAttributes: new { @class = "form-select pointer isvalidate is-valid", @onchange = "validatecontrol()" })

                    </li>
                    <li>
                        On Deputation Staff Allowed To Go On Tour But Not Eligible For DA Where As Rest Of All
                        Conditions Applicable:
                        @Html.DropDownListFor(m => m.DepuStaffDAEligibility,
                       new[] {
                           new SelectListItem { Text = "Yes", Value = "true" },
                           new SelectListItem { Text = "No", Value = "false" } }, "-",
                       htmlAttributes: new { @class = "form-select pointer isvalidate", @onchange = "validatecontrol()" })

                    </li>
                    <li>
                        DA & Extra DA Applicable To Designation “Driver” Or “Senior Driver” When On Tour As Saved In
                        “Material Gate Pass (For
                        Company Transport)” Shall Be Eligible When Return Trip Loaded With Goods More Than 85% Of
                        The Total Vehicle Capacity.
                        Otherwise Only Half Eligible DA For The Tour Is Payable:
                        @Html.DropDownListFor(m => m.ExtraDAApplicability,
                       new[] {
                           new SelectListItem { Text = "Yes", Value = "true" },
                           new SelectListItem { Text = "No", Value = "" } },
                       htmlAttributes: new
                       {
                           @class = "form-select pointer isvalidate",
                           @onchange = "validatecontrol()",
                           title = "Accept only yes"
                       })

                    </li>
                </ul>
            </div>
        </div>
        <div class="col-md-12">
            <div class="bgColor mb-4">
                <div class="col-md-12 form-sample">
                    <label class="d-flex">Category Code & Name :<span></span></label>
                    <div class="form-group">

                        @Html.ListBoxFor(m => m.SelectedCategoryIds, new MultiSelectList(Model.Categories, "ID", "DisplayText", Model.SelectedCategoryIds),
                       htmlAttributes: new
                            {
                                @multiple = "multiple",
                           @class = "form-select pointer example-getting-started isvalidate2 is-valid"
                       })

                    </div>
                </div>
            </div>
            <div class="col-md-12 mb-4">
                <div class="d-flex justify-content-center mt-3">

                    <button id="btnTransDetail" disabled="disabled"
                            type="submit" name="Submit" value="TMDtl"
                            class="btn btn-primary me-2"
                            @*onclick="window.location.href='@Url.Action("CreateTransModeDtls", "TADARules", new { Area = "Security" })';"*@>
                        Transport Mode - Details
                    </button>

                    <button id="btntadaParam" disabled="disabled"
                            type="submit" name="Submit" value="TAParam"
                            class="btn btn-primary"
                            @*onclick="window.location.href='@Url.Action("CreateParam", "TADARules", new { Area = "Security" })';"*@>
                        TA &amp; DA Parameters
                    </button>
                </div>
            </div>
        </div>
    }
</div>
@section headers
    {
    @*<link href="~/UIContent/CSS/Custom_ErrorToolTip.css" rel="stylesheet" />*@
    <style>
        .inVisible {
            display: none;
            height: 25px;
        }

        .pointer {
            cursor: pointer;
        }
    </style>
}
<script src="~/UIContent/JS/jquery-3.6.0.min.js"></script>
@section scripts{
    <script src="~/UIContent/JS/CustomePage/CreateRuleTADA.js"></script>
    <script>
        $(document).ready(function () {
            //var mymsg = '@ViewBag.DupMsg';
            if ('@ViewBag.DupMsg' != '') {
                Swal.fire({
                    title: 'Failed to create rule',
                    text: "@ViewBag.DupMsg",
                    icon: 'warning',
                    customClass: 'swal-wide',
                    buttons: {
                        //cancel: 'Cancel',
                        confirm: 'Ok'
                    },
                    //cancelButtonClass: 'btn-cancel',
                    confirmButtonColor: '#2527a2',
                });
            };
            if ('@ViewBag.Msg' != '') {
                Swal.fire({
                    title: 'Confirmation',
                    text: "@ViewBag.Msg",
                    icon: 'success',
                    customClass: 'swal-wide',
                    buttons: {
                        confirm: 'Ok'
                    },
                    confirmButtonColor: '#2527a2',
                }).then(callback);
                function callback(result) {
                    if (result.value) {
                        var url = "/Security/TADARules/Index";
                        window.location.href = url;
                    }
                }
            };
        });
    </script>
    <script>
        $(document).ready(function () {
            var parambtn = $('#IsParamBtn').val();
            if (parambtn == 1) {
                btnparam.removeAttr("disabled");
            } else {
                btnparam.attr("disabled", "disabled");
            }
            //$('.EffDt').val('');
            //$('input').css('cursor', 'hand');
        });
    </script>
    <script>
        $(document).ready(function () {
            $('#btnBack').click(function () {
                var url = "/Security/TADARules/Index";
                if ($('.is-invalid').length > 0 || $('#IsBtn').val() == 1) {
                    Swal.fire({
                        title: 'Confirmation Message',
                        text: "Are You Sure Want to Go Back?",
                        icon: 'question',
                        customClass: 'swal-wide',
                        //buttons: {
                        //    cancel: 'No',
                        //    confirm: 'Yes'
                        //},
                        confirmButtonText: "Yes",
                        cancelButtonText: "No",
                        cancelButtonClass: 'btn-cancel',
                        confirmButtonColor: '#2527a2',
                        showCancelButton: true,
                    }).then(callback);
                    function callback(result) {
                        if (result.value) {
                            window.location.href = url;
                        } else {
                            // second variant
                        }
                    }
                } else {
                    window.location.href = url;
                };
            });
        });
    </script>
    @*<script type="text/javascript">

        $(document).ready(function () {
            $(".only-numeric").bind("keypress", function (e) {
                var keyCode = e.which ? e.which : e.keyCode

                if (!(keyCode >= 48 && keyCode <= 57)) {
                    $(".error").css("display", "inline");
                    return false;
                } else {
                    $(".error").css("display", "none");
                }
            });
            $(".only-decimal").bind("keypress", function (e) {
                var keyCode = e.which ? e.which : e.keyCode
                //alert(keyCode);
                if (!(keyCode >= 48 && keyCode <= 57)) {
                    if (keyCode != 46) { return false; }
                    //$(".error").css("display", "inline");                    
                } else {
                    //$(".error").css("display", "none");
                }
            });
        });

    </script>*@
}


